.step(data-title='User Story: Send SMS or MMS Notifications', data-file="MarketingNotifications/Models/Subscriber.cs")
  h2 User Story: Send SMS or MMS Notifications
  blockquote As an Administrator, I want to be able to send an MMS with a message, and optional picture from a web interface.
  :markdown
    Now that we have a list of subscribers for our awesome SMS and MMS content, we need to provide our marketing team some kind of interface to send out messages.

    To make this happen, we will need to update our application to do a few things:

    * Create a route to render a web form that an administrator can interact with
    * Create an action method to handle the form submission
    * Use the Twilio API to send out messages to all current subscribers

    Let's begin at the front end with the web form our administrators will interact with.

.step(data-title='Creating the Web Form', data-file='MarketingNotifications/Views/Notifications/Index.cshtml')
  :markdown
    ## Creating the Web Form

    Here we use Razor to render an HTML document containing a web form to be used by our marketing campaign administrators.

    It just has a couple of fields - one to specify a text message, and another to specify an optional URL to an image on the public Internet that we could send via MMS.

    Let's go to the controller next to see what happens when the form is submitted.

.step(data-title='Handling the Form Submission', data-file='MarketingNotifications/Controllers/NotificationsController.cs', data-highlight='35-54')
  :markdown
    ## Handling the Form Submission

    On the server, we use [model binding](http://www.codeproject.com/Articles/710776/Introduction-to-ASP-NET-MVC-Model-Binding-An-Absol) to retrieve the message text and image URL from the POST body as parameters, then loop through all subscribers and call the `SendMessage` method on our `Subscriber` model to send the message.

    When the messages are on their way, we redirect back to the same web form with a message containing feedback about the messaging attempt.

    Let's jump into the model now to see how these messages are sent out.

.step(data-title='Using the Twilio REST Client', data-file='MarketingNotifications/Models/Subscriber.cs', data-highlight='18-35')
  :markdown
    ## Using the Twilio REST Client

    When the model object is loaded, it creates a [Twilio REST API client](https://github.com/twilio/twilio-csharp/wiki/Twilio.Api) that it can use to send SMS and MMS messages. The client requires your Twilio account credentials (an account SID and auth token), which can be found [in the account portal](/user/account/voice-messaging).

    Next all we need to do is call `SendMessage` on the client object in order to send our message. The Twilio Message API call requires a 'from' and 'to' parameter, a message 'body' and optionally an array of `mediaUrls` representing images.

    These few lines of code are all you need to send an SMS or MMS using C#.

.step(data-title='All Done!', data-file='MarketingNotifications/Models/Subscriber.cs')
  :markdown
    ## All Done!

    That's it! We've just implemented a an opt-in process and an administrative interface to run an SMS and MMS marketing campaign. Now all you need is killer content to share with your users via text or MMS.

    Thanks for checking out this tutorial! If you have any feedback to share with us, we'd love to hear it. Tweet [@twilio](http://twitter.com/twilio) to let us know what you think.
